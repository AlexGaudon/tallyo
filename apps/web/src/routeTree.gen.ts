/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TransactionsRouteImport } from './routes/transactions'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ReportsRouteImport } from './routes/reports'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as MerchantsRouteImport } from './routes/merchants'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CategoriesRouteImport } from './routes/categories'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSignupRouteImport } from './routes/_auth/signup'
import { Route as AuthSigninRouteImport } from './routes/_auth/signin'

const TransactionsRoute = TransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsRoute = ReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const MerchantsRoute = MerchantsRouteImport.update({
  id: '/merchants',
  path: '/merchants',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesRoute = CategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/_auth/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/_auth/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/dashboard': typeof DashboardRoute
  '/merchants': typeof MerchantsRoute
  '/privacy': typeof PrivacyRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
  '/transactions': typeof TransactionsRoute
  '/signin': typeof AuthSigninRoute
  '/signup': typeof AuthSignupRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/dashboard': typeof DashboardRoute
  '/merchants': typeof MerchantsRoute
  '/privacy': typeof PrivacyRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
  '/transactions': typeof TransactionsRoute
  '/signin': typeof AuthSigninRoute
  '/signup': typeof AuthSignupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRoute
  '/dashboard': typeof DashboardRoute
  '/merchants': typeof MerchantsRoute
  '/privacy': typeof PrivacyRoute
  '/reports': typeof ReportsRoute
  '/settings': typeof SettingsRoute
  '/terms': typeof TermsRoute
  '/transactions': typeof TransactionsRoute
  '/_auth/signin': typeof AuthSigninRoute
  '/_auth/signup': typeof AuthSignupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/categories'
    | '/dashboard'
    | '/merchants'
    | '/privacy'
    | '/reports'
    | '/settings'
    | '/terms'
    | '/transactions'
    | '/signin'
    | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/categories'
    | '/dashboard'
    | '/merchants'
    | '/privacy'
    | '/reports'
    | '/settings'
    | '/terms'
    | '/transactions'
    | '/signin'
    | '/signup'
  id:
    | '__root__'
    | '/'
    | '/categories'
    | '/dashboard'
    | '/merchants'
    | '/privacy'
    | '/reports'
    | '/settings'
    | '/terms'
    | '/transactions'
    | '/_auth/signin'
    | '/_auth/signup'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CategoriesRoute: typeof CategoriesRoute
  DashboardRoute: typeof DashboardRoute
  MerchantsRoute: typeof MerchantsRoute
  PrivacyRoute: typeof PrivacyRoute
  ReportsRoute: typeof ReportsRoute
  SettingsRoute: typeof SettingsRoute
  TermsRoute: typeof TermsRoute
  TransactionsRoute: typeof TransactionsRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/transactions': {
      id: '/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof TransactionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/merchants': {
      id: '/merchants'
      path: '/merchants'
      fullPath: '/merchants'
      preLoaderRoute: typeof MerchantsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/signin': {
      id: '/_auth/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoriesRoute: CategoriesRoute,
  DashboardRoute: DashboardRoute,
  MerchantsRoute: MerchantsRoute,
  PrivacyRoute: PrivacyRoute,
  ReportsRoute: ReportsRoute,
  SettingsRoute: SettingsRoute,
  TermsRoute: TermsRoute,
  TransactionsRoute: TransactionsRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
