/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as TransactionsImport } from "./routes/transactions";
import { Route as TosImport } from "./routes/tos";
import { Route as SigninImport } from "./routes/signin";
import { Route as PrivacyImport } from "./routes/privacy";
import { Route as ImportImport } from "./routes/import";
import { Route as DashboardImport } from "./routes/dashboard";
import { Route as CategoriesImport } from "./routes/categories";
import { Route as IndexImport } from "./routes/index";
import { Route as CategoriesCategoryImport } from "./routes/categories.$category";

// Create/Update Routes

const TransactionsRoute = TransactionsImport.update({
  id: "/transactions",
  path: "/transactions",
  getParentRoute: () => rootRoute,
} as any);

const TosRoute = TosImport.update({
  id: "/tos",
  path: "/tos",
  getParentRoute: () => rootRoute,
} as any);

const SigninRoute = SigninImport.update({
  id: "/signin",
  path: "/signin",
  getParentRoute: () => rootRoute,
} as any);

const PrivacyRoute = PrivacyImport.update({
  id: "/privacy",
  path: "/privacy",
  getParentRoute: () => rootRoute,
} as any);

const ImportRoute = ImportImport.update({
  id: "/import",
  path: "/import",
  getParentRoute: () => rootRoute,
} as any);

const DashboardRoute = DashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => rootRoute,
} as any);

const CategoriesRoute = CategoriesImport.update({
  id: "/categories",
  path: "/categories",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const CategoriesCategoryRoute = CategoriesCategoryImport.update({
  id: "/$category",
  path: "/$category",
  getParentRoute: () => CategoriesRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/categories": {
      id: "/categories";
      path: "/categories";
      fullPath: "/categories";
      preLoaderRoute: typeof CategoriesImport;
      parentRoute: typeof rootRoute;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardImport;
      parentRoute: typeof rootRoute;
    };
    "/import": {
      id: "/import";
      path: "/import";
      fullPath: "/import";
      preLoaderRoute: typeof ImportImport;
      parentRoute: typeof rootRoute;
    };
    "/privacy": {
      id: "/privacy";
      path: "/privacy";
      fullPath: "/privacy";
      preLoaderRoute: typeof PrivacyImport;
      parentRoute: typeof rootRoute;
    };
    "/signin": {
      id: "/signin";
      path: "/signin";
      fullPath: "/signin";
      preLoaderRoute: typeof SigninImport;
      parentRoute: typeof rootRoute;
    };
    "/tos": {
      id: "/tos";
      path: "/tos";
      fullPath: "/tos";
      preLoaderRoute: typeof TosImport;
      parentRoute: typeof rootRoute;
    };
    "/transactions": {
      id: "/transactions";
      path: "/transactions";
      fullPath: "/transactions";
      preLoaderRoute: typeof TransactionsImport;
      parentRoute: typeof rootRoute;
    };
    "/categories/$category": {
      id: "/categories/$category";
      path: "/$category";
      fullPath: "/categories/$category";
      preLoaderRoute: typeof CategoriesCategoryImport;
      parentRoute: typeof CategoriesImport;
    };
  }
}

// Create and export the route tree

interface CategoriesRouteChildren {
  CategoriesCategoryRoute: typeof CategoriesCategoryRoute;
}

const CategoriesRouteChildren: CategoriesRouteChildren = {
  CategoriesCategoryRoute: CategoriesCategoryRoute,
};

const CategoriesRouteWithChildren = CategoriesRoute._addFileChildren(CategoriesRouteChildren);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/categories": typeof CategoriesRouteWithChildren;
  "/dashboard": typeof DashboardRoute;
  "/import": typeof ImportRoute;
  "/privacy": typeof PrivacyRoute;
  "/signin": typeof SigninRoute;
  "/tos": typeof TosRoute;
  "/transactions": typeof TransactionsRoute;
  "/categories/$category": typeof CategoriesCategoryRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/categories": typeof CategoriesRouteWithChildren;
  "/dashboard": typeof DashboardRoute;
  "/import": typeof ImportRoute;
  "/privacy": typeof PrivacyRoute;
  "/signin": typeof SigninRoute;
  "/tos": typeof TosRoute;
  "/transactions": typeof TransactionsRoute;
  "/categories/$category": typeof CategoriesCategoryRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/categories": typeof CategoriesRouteWithChildren;
  "/dashboard": typeof DashboardRoute;
  "/import": typeof ImportRoute;
  "/privacy": typeof PrivacyRoute;
  "/signin": typeof SigninRoute;
  "/tos": typeof TosRoute;
  "/transactions": typeof TransactionsRoute;
  "/categories/$category": typeof CategoriesCategoryRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/categories"
    | "/dashboard"
    | "/import"
    | "/privacy"
    | "/signin"
    | "/tos"
    | "/transactions"
    | "/categories/$category";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/categories"
    | "/dashboard"
    | "/import"
    | "/privacy"
    | "/signin"
    | "/tos"
    | "/transactions"
    | "/categories/$category";
  id:
    | "__root__"
    | "/"
    | "/categories"
    | "/dashboard"
    | "/import"
    | "/privacy"
    | "/signin"
    | "/tos"
    | "/transactions"
    | "/categories/$category";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  CategoriesRoute: typeof CategoriesRouteWithChildren;
  DashboardRoute: typeof DashboardRoute;
  ImportRoute: typeof ImportRoute;
  PrivacyRoute: typeof PrivacyRoute;
  SigninRoute: typeof SigninRoute;
  TosRoute: typeof TosRoute;
  TransactionsRoute: typeof TransactionsRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoriesRoute: CategoriesRouteWithChildren,
  DashboardRoute: DashboardRoute,
  ImportRoute: ImportRoute,
  PrivacyRoute: PrivacyRoute,
  SigninRoute: SigninRoute,
  TosRoute: TosRoute,
  TransactionsRoute: TransactionsRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/categories",
        "/dashboard",
        "/import",
        "/privacy",
        "/signin",
        "/tos",
        "/transactions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/categories": {
      "filePath": "categories.tsx",
      "children": [
        "/categories/$category"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/import": {
      "filePath": "import.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/tos": {
      "filePath": "tos.tsx"
    },
    "/transactions": {
      "filePath": "transactions.tsx"
    },
    "/categories/$category": {
      "filePath": "categories.$category.tsx",
      "parent": "/categories"
    }
  }
}
ROUTE_MANIFEST_END */
